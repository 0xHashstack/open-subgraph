// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("loans", Value.fromStringArray(new Array(0)));
    this.set("deposits", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("initialMarket", Value.fromString(""));
    this.set("initialAmount", Value.fromBigInt(BigInt.zero()));
    this.set("commitment", Value.fromString(""));
    this.set("currentMarket", Value.fromString(""));
    this.set("currentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("isSwapped", Value.fromBoolean(false));
    this.set("state", Value.fromString(""));
    this.set("collateral", Value.fromString(""));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
    this.set("interestAccrued", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromI32(0));
    this.set("updatedAt", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Loan entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Loan", id.toString(), this);
    }
  }

  static load(id: string): Loan | null {
    return changetype<Loan | null>(store.get("Loan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initialMarket(): string {
    let value = this.get("initialMarket");
    return value!.toString();
  }

  set initialMarket(value: string) {
    this.set("initialMarket", Value.fromString(value));
  }

  get initialAmount(): BigInt {
    let value = this.get("initialAmount");
    return value!.toBigInt();
  }

  set initialAmount(value: BigInt) {
    this.set("initialAmount", Value.fromBigInt(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    return value!.toString();
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get currentMarket(): string {
    let value = this.get("currentMarket");
    return value!.toString();
  }

  set currentMarket(value: string) {
    this.set("currentMarket", Value.fromString(value));
  }

  get currentAmount(): BigInt {
    let value = this.get("currentAmount");
    return value!.toBigInt();
  }

  set currentAmount(value: BigInt) {
    this.set("currentAmount", Value.fromBigInt(value));
  }

  get isSwapped(): boolean {
    let value = this.get("isSwapped");
    return value!.toBoolean();
  }

  set isSwapped(value: boolean) {
    this.set("isSwapped", Value.fromBoolean(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    return value!.toString();
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get interestAccrued(): BigInt {
    let value = this.get("interestAccrued");
    return value!.toBigInt();
  }

  set interestAccrued(value: BigInt) {
    this.set("interestAccrued", Value.fromBigInt(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("initialAmount", Value.fromBigInt(BigInt.zero()));
    this.set("currentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("feePaid", Value.fromBigInt(BigInt.zero()));
    this.set("loan", Value.fromString(""));
    this.set("date", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Collateral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Collateral", id.toString(), this);
    }
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get("Collateral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get initialAmount(): BigInt {
    let value = this.get("initialAmount");
    return value!.toBigInt();
  }

  set initialAmount(value: BigInt) {
    this.set("initialAmount", Value.fromBigInt(value));
  }

  get currentAmount(): BigInt {
    let value = this.get("currentAmount");
    return value!.toBigInt();
  }

  set currentAmount(value: BigInt) {
    this.set("currentAmount", Value.fromBigInt(value));
  }

  get feePaid(): BigInt {
    let value = this.get("feePaid");
    return value!.toBigInt();
  }

  set feePaid(value: BigInt) {
    this.set("feePaid", Value.fromBigInt(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value!.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("currentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("commitment", Value.fromString(""));
    this.set("interestAccrued", Value.fromBigInt(BigInt.zero()));
    this.set("state", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("createdAt", Value.fromI32(0));
    this.set("updatedAt", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currentAmount(): BigInt {
    let value = this.get("currentAmount");
    return value!.toBigInt();
  }

  set currentAmount(value: BigInt) {
    this.set("currentAmount", Value.fromBigInt(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    return value!.toString();
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get interestAccrued(): BigInt {
    let value = this.get("interestAccrued");
    return value!.toBigInt();
  }

  set interestAccrued(value: BigInt) {
    this.set("interestAccrued", Value.fromBigInt(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get lockedAt(): i32 {
    let value = this.get("lockedAt");
    return value!.toI32();
  }

  set lockedAt(value: i32) {
    this.set("lockedAt", Value.fromI32(value));
  }

  get lockValidity(): i32 {
    let value = this.get("lockValidity");
    return value!.toI32();
  }

  set lockValidity(value: i32) {
    this.set("lockValidity", Value.fromI32(value));
  }

  get feePaid(): BigInt | null {
    let value = this.get("feePaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePaid(value: BigInt | null) {
    if (!value) {
      this.unset("feePaid");
    } else {
      this.set("feePaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class Apr extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("instrumentType", Value.fromString(""));
    this.set("market", Value.fromString(""));
    this.set("commitment", Value.fromString(""));
    this.set("interest", Value.fromI32(0));
    this.set("date", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Apr entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Apr entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Apr", id.toString(), this);
    }
  }

  static load(id: string): Apr | null {
    return changetype<Apr | null>(store.get("Apr", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get instrumentType(): string {
    let value = this.get("instrumentType");
    return value!.toString();
  }

  set instrumentType(value: string) {
    this.set("instrumentType", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    return value!.toString();
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get interest(): i32 {
    let value = this.get("interest");
    return value!.toI32();
  }

  set interest(value: i32) {
    this.set("interest", Value.fromI32(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class SupportedMarket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("minAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SupportedMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SupportedMarket entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SupportedMarket", id.toString(), this);
    }
  }

  static load(id: string): SupportedMarket | null {
    return changetype<SupportedMarket | null>(store.get("SupportedMarket", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get minAmount(): BigInt {
    let value = this.get("minAmount");
    return value!.toBigInt();
  }

  set minAmount(value: BigInt) {
    this.set("minAmount", Value.fromBigInt(value));
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("commitment", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("instrumentType", Value.fromString(""));
    this.set("date", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reserve entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reserve entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reserve", id.toString(), this);
    }
  }

  static load(id: string): Reserve | null {
    return changetype<Reserve | null>(store.get("Reserve", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    return value!.toString();
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get instrumentType(): string {
    let value = this.get("instrumentType");
    return value!.toString();
  }

  set instrumentType(value: string) {
    this.set("instrumentType", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class Utilisation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("commitment", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("date", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Utilisation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Utilisation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Utilisation", id.toString(), this);
    }
  }

  static load(id: string): Utilisation | null {
    return changetype<Utilisation | null>(store.get("Utilisation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    return value!.toString();
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}
